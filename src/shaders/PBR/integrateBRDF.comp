#define NO_DEFAULT_PUSH_CONSTANTS
#include "../includes/Bindless/Setup.hlsl"

DefinePushConstants(
    Handle< RWTexture2D<float2> > outTex;
);

#include "../PBR/PBR.hlsl"

// https://learnopengl.com/PBR/IBL/Specular-IBL#:~:text=Pre%2Dcomputing%20the%20BRDF

float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
float2 Hammersley(uint i, uint N)
{
    return float2(float(i)/float(N), RadicalInverse_VdC(i));
}

float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness*roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    float3 up        = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent   = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);
	
    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float2 integrateBDRF(float NdotV, float roughness)
{
    float3 V = float3(
        sqrt(1.0 - NdotV*NdotV),
        0.0,
        NdotV
    );

    float A = 0.0;
    float B = 0.0;

    float3 N = float3(0,0,1);

    const uint SAMPLES = 1024u;

    for (int i=0; i<SAMPLES; i++)
    {
        float2 Xi = Hammersley(i, SAMPLES);
        float3 H = ImportanceSampleGGX(Xi, N, roughness);
        float3 L = normalize(2 * dot(V,H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V,H), 0.0);

        if(NdotL > 0.0)
        {
            float G = GeometrySmith_IBL(N, V, L, roughness);
            float G_Vis = (G*VdotH)/(NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    A /= float(SAMPLES);
    B /= float(SAMPLES);

    return float2(A,B);
}

[numthreads(8, 8, 1)]
void main(uint3 GlobalInvocationID : SV_DispatchThreadID)
{
    int3 id = GlobalInvocationID;

    RWTexture2D<float2> outTex = pushConstants.outTex.get();
    int2 outSize;
    outTex.GetDimensions(outSize.x,outSize.y);

    float2 uv = float2(id.xy + 0.5) / outSize.xy;

    outTex[id.xy] = integrateBDRF(uv.x, uv.y);
}